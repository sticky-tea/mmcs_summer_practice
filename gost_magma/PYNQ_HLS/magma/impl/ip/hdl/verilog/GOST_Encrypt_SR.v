// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="GOST_Encrypt_SR_GOST_Encrypt_SR,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.384000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=671,HLS_SYN_LUT=1828,HLS_VERSION=2021_1}" *)

module GOST_Encrypt_SR (
        ap_clk,
        ap_rst_n,
        Data_i,
        Data_o,
        Data_o_ap_vld,
        Mode,
        Data_out,
        Data_out_ap_vld,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 116'd1;
parameter    ap_ST_fsm_state2 = 116'd2;
parameter    ap_ST_fsm_state3 = 116'd4;
parameter    ap_ST_fsm_state4 = 116'd8;
parameter    ap_ST_fsm_state5 = 116'd16;
parameter    ap_ST_fsm_state6 = 116'd32;
parameter    ap_ST_fsm_state7 = 116'd64;
parameter    ap_ST_fsm_state8 = 116'd128;
parameter    ap_ST_fsm_state9 = 116'd256;
parameter    ap_ST_fsm_state10 = 116'd512;
parameter    ap_ST_fsm_state11 = 116'd1024;
parameter    ap_ST_fsm_state12 = 116'd2048;
parameter    ap_ST_fsm_state13 = 116'd4096;
parameter    ap_ST_fsm_state14 = 116'd8192;
parameter    ap_ST_fsm_state15 = 116'd16384;
parameter    ap_ST_fsm_state16 = 116'd32768;
parameter    ap_ST_fsm_state17 = 116'd65536;
parameter    ap_ST_fsm_state18 = 116'd131072;
parameter    ap_ST_fsm_state19 = 116'd262144;
parameter    ap_ST_fsm_state20 = 116'd524288;
parameter    ap_ST_fsm_state21 = 116'd1048576;
parameter    ap_ST_fsm_state22 = 116'd2097152;
parameter    ap_ST_fsm_state23 = 116'd4194304;
parameter    ap_ST_fsm_state24 = 116'd8388608;
parameter    ap_ST_fsm_state25 = 116'd16777216;
parameter    ap_ST_fsm_state26 = 116'd33554432;
parameter    ap_ST_fsm_state27 = 116'd67108864;
parameter    ap_ST_fsm_state28 = 116'd134217728;
parameter    ap_ST_fsm_state29 = 116'd268435456;
parameter    ap_ST_fsm_state30 = 116'd536870912;
parameter    ap_ST_fsm_state31 = 116'd1073741824;
parameter    ap_ST_fsm_state32 = 116'd2147483648;
parameter    ap_ST_fsm_state33 = 116'd4294967296;
parameter    ap_ST_fsm_state34 = 116'd8589934592;
parameter    ap_ST_fsm_state35 = 116'd17179869184;
parameter    ap_ST_fsm_state36 = 116'd34359738368;
parameter    ap_ST_fsm_state37 = 116'd68719476736;
parameter    ap_ST_fsm_state38 = 116'd137438953472;
parameter    ap_ST_fsm_state39 = 116'd274877906944;
parameter    ap_ST_fsm_state40 = 116'd549755813888;
parameter    ap_ST_fsm_state41 = 116'd1099511627776;
parameter    ap_ST_fsm_state42 = 116'd2199023255552;
parameter    ap_ST_fsm_state43 = 116'd4398046511104;
parameter    ap_ST_fsm_state44 = 116'd8796093022208;
parameter    ap_ST_fsm_state45 = 116'd17592186044416;
parameter    ap_ST_fsm_state46 = 116'd35184372088832;
parameter    ap_ST_fsm_state47 = 116'd70368744177664;
parameter    ap_ST_fsm_state48 = 116'd140737488355328;
parameter    ap_ST_fsm_state49 = 116'd281474976710656;
parameter    ap_ST_fsm_state50 = 116'd562949953421312;
parameter    ap_ST_fsm_state51 = 116'd1125899906842624;
parameter    ap_ST_fsm_state52 = 116'd2251799813685248;
parameter    ap_ST_fsm_state53 = 116'd4503599627370496;
parameter    ap_ST_fsm_state54 = 116'd9007199254740992;
parameter    ap_ST_fsm_state55 = 116'd18014398509481984;
parameter    ap_ST_fsm_state56 = 116'd36028797018963968;
parameter    ap_ST_fsm_state57 = 116'd72057594037927936;
parameter    ap_ST_fsm_state58 = 116'd144115188075855872;
parameter    ap_ST_fsm_state59 = 116'd288230376151711744;
parameter    ap_ST_fsm_state60 = 116'd576460752303423488;
parameter    ap_ST_fsm_state61 = 116'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 116'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 116'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 116'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 116'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 116'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 116'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 116'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 116'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 116'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 116'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 116'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 116'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 116'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 116'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 116'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 116'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 116'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 116'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 116'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 116'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 116'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 116'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 116'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 116'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 116'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 116'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 116'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 116'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 116'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 116'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 116'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 116'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 116'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 116'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 116'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 116'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 116'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 116'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 116'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 116'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 116'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 116'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 116'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 116'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 116'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 116'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 116'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 116'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 116'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 116'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 116'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 116'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 116'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 116'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 116'd41538374868278621028243970633760768;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] Data_i;
output  [7:0] Data_o;
output   Data_o_ap_vld;
input   Mode;
output  [7:0] Data_out;
output   Data_out_ap_vld;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg[7:0] Data_o;
reg Data_o_ap_vld;
reg Data_out_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [115:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] Size;
wire   [63:0] grp_GOST_Crypt_Step_fu_217_ap_return;
reg   [63:0] reg_315;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state113;
wire   [0:0] Mode_read_read_fu_142_p2;
reg   [31:0] Size_read_reg_834;
wire   [3:0] Cur_Part_Size_fu_354_p3;
reg   [3:0] Cur_Part_Size_reg_845;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln186_fu_328_p2;
wire   [63:0] Data_load_1_cast_fu_362_p1;
reg   [63:0] Data_load_1_cast_reg_852;
reg   [7:0] Data_read_reg_864;
wire   [3:0] empty_142_fu_376_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] Data_prep_1_fu_615_p9;
wire   [0:0] exitcond21_fu_371_p2;
wire   [63:0] Data_prep_3_fu_734_p9;
reg   [63:0] Data_prep_3_reg_882;
wire    ap_CS_fsm_state67;
wire   [3:0] empty_159_fu_759_p2;
wire    ap_CS_fsm_state115;
wire    grp_GOST_Crypt_Step_fu_217_ap_start;
wire    grp_GOST_Crypt_Step_fu_217_ap_done;
wire    grp_GOST_Crypt_Step_fu_217_ap_idle;
wire    grp_GOST_Crypt_Step_fu_217_ap_ready;
reg   [63:0] grp_GOST_Crypt_Step_fu_217_Data_prep_read;
reg   [31:0] grp_GOST_Crypt_Step_fu_217_GOST_Key;
reg   [0:0] grp_GOST_Crypt_Step_fu_217_Last;
wire   [63:0] ap_phi_mux_empty_phi_fu_178_p4;
reg   [63:0] empty_reg_174;
reg   [3:0] loop_index37_reg_186;
reg   [3:0] loop_index34_reg_206;
wire   [0:0] exitcond20_fu_754_p2;
reg    grp_GOST_Crypt_Step_fu_217_ap_start_reg;
reg   [115:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_NS_fsm_state6;
wire    ap_NS_fsm_state8;
wire    ap_NS_fsm_state10;
wire    ap_NS_fsm_state12;
wire    ap_NS_fsm_state14;
wire    ap_NS_fsm_state16;
wire    ap_NS_fsm_state18;
wire    ap_NS_fsm_state20;
wire    ap_NS_fsm_state22;
wire    ap_NS_fsm_state24;
wire    ap_NS_fsm_state26;
wire    ap_NS_fsm_state28;
wire    ap_NS_fsm_state30;
wire    ap_NS_fsm_state32;
wire    ap_NS_fsm_state34;
wire    ap_NS_fsm_state36;
wire    ap_NS_fsm_state38;
wire    ap_NS_fsm_state40;
wire    ap_NS_fsm_state42;
wire    ap_NS_fsm_state44;
wire    ap_NS_fsm_state46;
wire    ap_NS_fsm_state48;
wire    ap_NS_fsm_state50;
wire    ap_NS_fsm_state52;
wire    ap_NS_fsm_state54;
wire    ap_NS_fsm_state56;
wire    ap_NS_fsm_state58;
wire    ap_NS_fsm_state60;
wire    ap_NS_fsm_state62;
wire    ap_NS_fsm_state64;
wire    ap_NS_fsm_state66;
wire    ap_NS_fsm_state68;
wire    ap_NS_fsm_state70;
wire    ap_NS_fsm_state72;
wire    ap_NS_fsm_state74;
wire    ap_NS_fsm_state76;
wire    ap_NS_fsm_state78;
wire    ap_NS_fsm_state80;
wire    ap_NS_fsm_state82;
wire    ap_NS_fsm_state84;
wire    ap_NS_fsm_state86;
wire    ap_NS_fsm_state88;
wire    ap_NS_fsm_state90;
wire    ap_NS_fsm_state92;
wire    ap_NS_fsm_state94;
wire    ap_NS_fsm_state96;
wire    ap_NS_fsm_state98;
wire    ap_NS_fsm_state100;
wire    ap_NS_fsm_state102;
wire    ap_NS_fsm_state104;
wire    ap_NS_fsm_state106;
wire    ap_NS_fsm_state108;
wire    ap_NS_fsm_state110;
wire    ap_NS_fsm_state112;
wire    ap_NS_fsm_state114;
wire   [63:0] Data_prep_fu_639_p9;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state114;
reg   [31:0] Size_assign_fu_134;
wire   [31:0] sub_ln208_fu_794_p2;
reg   [31:0] loop_index_fu_138;
wire   [31:0] empty_163_fu_812_p2;
wire    ap_CS_fsm_state116;
wire   [0:0] exitcond_fu_807_p2;
wire   [7:0] empty_162_fu_786_p1;
reg   [63:0] grp_fu_238_p1;
reg   [63:0] grp_fu_249_p1;
reg   [63:0] grp_fu_260_p1;
reg   [63:0] grp_fu_271_p1;
reg   [63:0] grp_fu_282_p1;
reg   [63:0] grp_fu_293_p1;
reg   [63:0] grp_fu_304_p1;
wire   [28:0] tmp_fu_334_p4;
wire   [0:0] icmp_ln188_fu_344_p2;
wire   [3:0] trunc_ln188_fu_350_p1;
wire   [2:0] empty_143_fu_382_p1;
wire   [7:0] loop_index37_cast_cast_fu_386_p1;
wire   [5:0] tmp_1_fu_396_p3;
wire   [63:0] p_cast38_fu_404_p1;
wire   [7:0] empty_144_fu_390_p2;
wire   [63:0] empty_145_fu_408_p2;
wire   [0:0] empty_146_fu_413_p1;
wire   [7:0] empty_147_fu_417_p1;
wire   [7:0] empty_148_fu_421_p1;
wire   [0:0] tmp_2_fu_433_p3;
wire   [7:0] tmp_4_fu_441_p4;
wire   [7:0] grp_fu_238_p4;
wire   [0:0] tmp_3_fu_459_p3;
wire   [7:0] tmp_6_fu_467_p4;
wire   [7:0] grp_fu_249_p4;
wire   [0:0] tmp_18_fu_485_p3;
wire   [7:0] tmp_8_fu_493_p4;
wire   [7:0] grp_fu_260_p4;
wire   [0:0] tmp_20_fu_511_p3;
wire   [7:0] tmp_s_fu_519_p4;
wire   [7:0] grp_fu_271_p4;
wire   [0:0] tmp_21_fu_537_p3;
wire   [7:0] tmp_11_fu_545_p4;
wire   [7:0] grp_fu_282_p4;
wire   [0:0] tmp_22_fu_563_p3;
wire   [7:0] tmp_13_fu_571_p4;
wire   [7:0] grp_fu_293_p4;
wire   [0:0] tmp_23_fu_589_p3;
wire   [7:0] tmp_15_fu_597_p4;
wire   [7:0] grp_fu_304_p4;
wire   [7:0] empty_156_fu_607_p3;
wire   [7:0] empty_155_fu_581_p3;
wire   [7:0] empty_154_fu_555_p3;
wire   [7:0] empty_153_fu_529_p3;
wire   [7:0] empty_152_fu_503_p3;
wire   [7:0] empty_151_fu_477_p3;
wire   [7:0] empty_150_fu_451_p3;
wire   [7:0] empty_149_fu_425_p3;
wire   [7:0] empty_157_fu_635_p1;
wire   [7:0] p_10_fu_694_p4;
wire   [7:0] p_12_fu_714_p4;
wire   [7:0] p_13_fu_724_p4;
wire   [7:0] p_11_fu_704_p4;
wire   [7:0] empty_158_fu_660_p1;
wire   [7:0] p_9_fu_674_p4;
wire   [7:0] p_7_fu_684_p4;
wire   [7:0] p_8_fu_664_p4;
wire   [2:0] empty_160_fu_765_p1;
wire   [5:0] tmp_17_fu_769_p3;
wire   [63:0] p_cast40_fu_777_p1;
wire   [63:0] empty_161_fu_781_p2;
wire   [31:0] zext_ln207_fu_791_p1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 116'd1;
#0 grp_GOST_Crypt_Step_fu_217_ap_start_reg = 1'b0;
end

GOST_Encrypt_SR_GOST_Crypt_Step grp_GOST_Crypt_Step_fu_217(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_GOST_Crypt_Step_fu_217_ap_start),
    .ap_done(grp_GOST_Crypt_Step_fu_217_ap_done),
    .ap_idle(grp_GOST_Crypt_Step_fu_217_ap_idle),
    .ap_ready(grp_GOST_Crypt_Step_fu_217_ap_ready),
    .ap_ce(1'b1),
    .Data_prep_read(grp_GOST_Crypt_Step_fu_217_Data_prep_read),
    .GOST_Key(grp_GOST_Crypt_Step_fu_217_GOST_Key),
    .Last(grp_GOST_Crypt_Step_fu_217_Last),
    .ap_return(grp_GOST_Crypt_Step_fu_217_ap_return)
);

GOST_Encrypt_SR_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .Size(Size),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_GOST_Crypt_Step_fu_217_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state114) & (1'b1 == ap_CS_fsm_state113)) | ((1'b1 == ap_NS_fsm_state112) & (1'b1 == ap_CS_fsm_state111)) | ((1'b1 == ap_NS_fsm_state110) & (1'b1 == ap_CS_fsm_state109)) | ((1'b1 == ap_NS_fsm_state108) & (1'b1 == ap_CS_fsm_state107)) | ((1'b1 == ap_NS_fsm_state106) & (1'b1 == ap_CS_fsm_state105)) | ((1'b1 == ap_NS_fsm_state104) & (1'b1 == ap_CS_fsm_state103)) | ((1'b1 == ap_NS_fsm_state102) & (1'b1 == ap_CS_fsm_state101)) | ((1'b1 == ap_NS_fsm_state100) & (1'b1 == ap_CS_fsm_state99)) | ((1'b1 == ap_NS_fsm_state98) & (1'b1 == ap_CS_fsm_state97)) | ((1'b1 == ap_NS_fsm_state96) & (1'b1 == ap_CS_fsm_state95)) | ((1'b1 == ap_NS_fsm_state94) & (1'b1 == ap_CS_fsm_state93)) | ((1'b1 == ap_NS_fsm_state92) & (1'b1 == ap_CS_fsm_state91)) | ((1'b1 == ap_NS_fsm_state90) & (1'b1 == ap_CS_fsm_state89)) | ((1'b1 == ap_NS_fsm_state88) & (1'b1 == ap_CS_fsm_state87)) | ((1'b1 == ap_NS_fsm_state86) & (1'b1 == ap_CS_fsm_state85)) | ((1'b1 == ap_NS_fsm_state84) & (1'b1 == ap_CS_fsm_state83)) | ((1'b1 == ap_NS_fsm_state82) & (1'b1 == ap_CS_fsm_state81)) | ((1'b1 == ap_NS_fsm_state80) & (1'b1 == ap_CS_fsm_state79)) | ((1'b1 == ap_NS_fsm_state78) & (1'b1 == ap_CS_fsm_state77)) | ((1'b1 == ap_NS_fsm_state76) & (1'b1 == ap_CS_fsm_state75)) | ((1'b1 == ap_NS_fsm_state74) & (1'b1 == ap_CS_fsm_state73)) | ((1'b1 == ap_NS_fsm_state72) & (1'b1 == ap_CS_fsm_state71)) | ((1'b1 == ap_NS_fsm_state70) & (1'b1 == ap_CS_fsm_state69)) | ((1'b1 == ap_NS_fsm_state68) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_NS_fsm_state66) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == ap_NS_fsm_state64) & (1'b1 == ap_CS_fsm_state63)) | ((1'b1 == ap_NS_fsm_state62) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == ap_NS_fsm_state60) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == ap_NS_fsm_state58) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == ap_NS_fsm_state56) & (1'b1 == ap_CS_fsm_state55)) | ((1'b1 == ap_NS_fsm_state54) & (1'b1 == ap_CS_fsm_state53)) | ((1'b1 == ap_NS_fsm_state52) & (1'b1 == ap_CS_fsm_state51)) | ((1'b1 == ap_NS_fsm_state50) & (1'b1 == ap_CS_fsm_state49)) | ((1'b1 == ap_NS_fsm_state48) & (1'b1 == ap_CS_fsm_state47)) | ((1'b1 == ap_NS_fsm_state46) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == ap_NS_fsm_state44) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == ap_NS_fsm_state42) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == ap_NS_fsm_state40) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == ap_NS_fsm_state38) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == ap_NS_fsm_state36) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == ap_NS_fsm_state34) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == ap_NS_fsm_state32) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_NS_fsm_state30) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == ap_NS_fsm_state28) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == ap_NS_fsm_state26) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_NS_fsm_state24) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == ap_NS_fsm_state22) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_NS_fsm_state20) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_NS_fsm_state18) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_NS_fsm_state16) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_NS_fsm_state14) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_NS_fsm_state12) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_NS_fsm_state10) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_NS_fsm_state8) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_NS_fsm_state6) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_GOST_Crypt_Step_fu_217_ap_start_reg <= 1'b1;
        end else if ((grp_GOST_Crypt_Step_fu_217_ap_ready == 1'b1)) begin
            grp_GOST_Crypt_Step_fu_217_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Size_assign_fu_134 <= Size;
    end else if (((exitcond20_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state115))) begin
        Size_assign_fu_134 <= sub_ln208_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_174 <= 64'd0;
    end else if (((exitcond21_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_174 <= Data_prep_1_fu_615_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        loop_index34_reg_206 <= 4'd0;
    end else if (((exitcond20_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        loop_index34_reg_206 <= empty_159_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_index37_reg_186 <= 4'd0;
    end else if (((exitcond21_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        loop_index37_reg_186 <= empty_142_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_index_fu_138 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state116) & (exitcond_fu_807_p2 == 1'd0))) begin
        loop_index_fu_138 <= empty_163_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Cur_Part_Size_reg_845 <= Cur_Part_Size_fu_354_p3;
        Data_load_1_cast_reg_852[7 : 0] <= Data_load_1_cast_fu_362_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        Data_prep_3_reg_882 <= Data_prep_3_fu_734_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Data_read_reg_864 <= Data_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Size_read_reg_834 <= Size;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_315 <= grp_GOST_Crypt_Step_fu_217_ap_return;
    end
end

always @ (*) begin
    if (((exitcond20_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        Data_o = empty_162_fu_786_p1;
    end else begin
        Data_o = Data_i;
    end
end

always @ (*) begin
    if (((exitcond20_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        Data_o_ap_vld = 1'b1;
    end else begin
        Data_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) & (exitcond_fu_807_p2 == 1'd0))) begin
        Data_out_ap_vld = 1'b1;
    end else begin
        Data_out_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) & (exitcond_fu_807_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) & (exitcond_fu_807_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_GOST_Crypt_Step_fu_217_Data_prep_read = reg_315;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_GOST_Crypt_Step_fu_217_Data_prep_read = Data_prep_fu_639_p9;
    end else begin
        grp_GOST_Crypt_Step_fu_217_Data_prep_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd3186605266;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd2664266031;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd2317266577;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd1108494101;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd1036694509;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd2428749778;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd4210767952;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 32'd3774248196;
    end else begin
        grp_GOST_Crypt_Step_fu_217_GOST_Key = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state66))) begin
        grp_GOST_Crypt_Step_fu_217_Last = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_GOST_Crypt_Step_fu_217_Last = 1'd0;
    end else begin
        grp_GOST_Crypt_Step_fu_217_Last = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_238_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_238_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_238_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_249_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_249_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_249_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_260_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_260_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_260_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_271_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_271_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_271_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_282_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_282_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_282_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_293_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_293_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_304_p1 = empty_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_304_p1 = ap_phi_mux_empty_phi_fu_178_p4;
    end else begin
        grp_fu_304_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln186_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond21_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'd1 == Mode_read_read_fu_142_p2) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state115 : begin
            if (((exitcond20_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state115))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state116 : begin
            if (((1'b1 == ap_CS_fsm_state116) & (exitcond_fu_807_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cur_Part_Size_fu_354_p3 = ((icmp_ln188_fu_344_p2[0:0] == 1'b1) ? trunc_ln188_fu_350_p1 : 4'd8);

assign Data_load_1_cast_fu_362_p1 = Data_i;

assign Data_out = Data_read_reg_864;

assign Data_prep_1_fu_615_p9 = {{{{{{{{empty_156_fu_607_p3}, {empty_155_fu_581_p3}}, {empty_154_fu_555_p3}}, {empty_153_fu_529_p3}}, {empty_152_fu_503_p3}}, {empty_151_fu_477_p3}}, {empty_150_fu_451_p3}}, {empty_149_fu_425_p3}};

assign Data_prep_3_fu_734_p9 = {{{{{{{{p_10_fu_694_p4}, {p_12_fu_714_p4}}, {p_13_fu_724_p4}}, {p_11_fu_704_p4}}, {empty_158_fu_660_p1}}, {p_9_fu_674_p4}}, {p_7_fu_684_p4}}, {p_8_fu_664_p4}};

assign Data_prep_fu_639_p9 = {{{{{{{{grp_fu_271_p4}, {grp_fu_282_p4}}, {grp_fu_293_p4}}, {grp_fu_304_p4}}, {empty_157_fu_635_p1}}, {grp_fu_238_p4}}, {grp_fu_249_p4}}, {grp_fu_260_p4}};

assign Mode_read_read_fu_142_p2 = Mode;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_NS_fsm_state10 = ap_NS_fsm[32'd9];

assign ap_NS_fsm_state100 = ap_NS_fsm[32'd99];

assign ap_NS_fsm_state102 = ap_NS_fsm[32'd101];

assign ap_NS_fsm_state104 = ap_NS_fsm[32'd103];

assign ap_NS_fsm_state106 = ap_NS_fsm[32'd105];

assign ap_NS_fsm_state108 = ap_NS_fsm[32'd107];

assign ap_NS_fsm_state110 = ap_NS_fsm[32'd109];

assign ap_NS_fsm_state112 = ap_NS_fsm[32'd111];

assign ap_NS_fsm_state114 = ap_NS_fsm[32'd113];

assign ap_NS_fsm_state12 = ap_NS_fsm[32'd11];

assign ap_NS_fsm_state14 = ap_NS_fsm[32'd13];

assign ap_NS_fsm_state16 = ap_NS_fsm[32'd15];

assign ap_NS_fsm_state18 = ap_NS_fsm[32'd17];

assign ap_NS_fsm_state20 = ap_NS_fsm[32'd19];

assign ap_NS_fsm_state22 = ap_NS_fsm[32'd21];

assign ap_NS_fsm_state24 = ap_NS_fsm[32'd23];

assign ap_NS_fsm_state26 = ap_NS_fsm[32'd25];

assign ap_NS_fsm_state28 = ap_NS_fsm[32'd27];

assign ap_NS_fsm_state30 = ap_NS_fsm[32'd29];

assign ap_NS_fsm_state32 = ap_NS_fsm[32'd31];

assign ap_NS_fsm_state34 = ap_NS_fsm[32'd33];

assign ap_NS_fsm_state36 = ap_NS_fsm[32'd35];

assign ap_NS_fsm_state38 = ap_NS_fsm[32'd37];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

assign ap_NS_fsm_state40 = ap_NS_fsm[32'd39];

assign ap_NS_fsm_state42 = ap_NS_fsm[32'd41];

assign ap_NS_fsm_state44 = ap_NS_fsm[32'd43];

assign ap_NS_fsm_state46 = ap_NS_fsm[32'd45];

assign ap_NS_fsm_state48 = ap_NS_fsm[32'd47];

assign ap_NS_fsm_state50 = ap_NS_fsm[32'd49];

assign ap_NS_fsm_state52 = ap_NS_fsm[32'd51];

assign ap_NS_fsm_state54 = ap_NS_fsm[32'd53];

assign ap_NS_fsm_state56 = ap_NS_fsm[32'd55];

assign ap_NS_fsm_state58 = ap_NS_fsm[32'd57];

assign ap_NS_fsm_state6 = ap_NS_fsm[32'd5];

assign ap_NS_fsm_state60 = ap_NS_fsm[32'd59];

assign ap_NS_fsm_state62 = ap_NS_fsm[32'd61];

assign ap_NS_fsm_state64 = ap_NS_fsm[32'd63];

assign ap_NS_fsm_state66 = ap_NS_fsm[32'd65];

assign ap_NS_fsm_state68 = ap_NS_fsm[32'd67];

assign ap_NS_fsm_state70 = ap_NS_fsm[32'd69];

assign ap_NS_fsm_state72 = ap_NS_fsm[32'd71];

assign ap_NS_fsm_state74 = ap_NS_fsm[32'd73];

assign ap_NS_fsm_state76 = ap_NS_fsm[32'd75];

assign ap_NS_fsm_state78 = ap_NS_fsm[32'd77];

assign ap_NS_fsm_state8 = ap_NS_fsm[32'd7];

assign ap_NS_fsm_state80 = ap_NS_fsm[32'd79];

assign ap_NS_fsm_state82 = ap_NS_fsm[32'd81];

assign ap_NS_fsm_state84 = ap_NS_fsm[32'd83];

assign ap_NS_fsm_state86 = ap_NS_fsm[32'd85];

assign ap_NS_fsm_state88 = ap_NS_fsm[32'd87];

assign ap_NS_fsm_state90 = ap_NS_fsm[32'd89];

assign ap_NS_fsm_state92 = ap_NS_fsm[32'd91];

assign ap_NS_fsm_state94 = ap_NS_fsm[32'd93];

assign ap_NS_fsm_state96 = ap_NS_fsm[32'd95];

assign ap_NS_fsm_state98 = ap_NS_fsm[32'd97];

assign ap_phi_mux_empty_phi_fu_178_p4 = empty_reg_174;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_142_fu_376_p2 = (loop_index37_reg_186 + 4'd1);

assign empty_143_fu_382_p1 = loop_index37_reg_186[2:0];

assign empty_144_fu_390_p2 = 8'd1 << loop_index37_cast_cast_fu_386_p1;

assign empty_145_fu_408_p2 = Data_load_1_cast_reg_852 << p_cast38_fu_404_p1;

assign empty_146_fu_413_p1 = empty_144_fu_390_p2[0:0];

assign empty_147_fu_417_p1 = empty_145_fu_408_p2[7:0];

assign empty_148_fu_421_p1 = empty_reg_174[7:0];

assign empty_149_fu_425_p3 = ((empty_146_fu_413_p1[0:0] == 1'b1) ? empty_147_fu_417_p1 : empty_148_fu_421_p1);

assign empty_150_fu_451_p3 = ((tmp_2_fu_433_p3[0:0] == 1'b1) ? tmp_4_fu_441_p4 : grp_fu_238_p4);

assign empty_151_fu_477_p3 = ((tmp_3_fu_459_p3[0:0] == 1'b1) ? tmp_6_fu_467_p4 : grp_fu_249_p4);

assign empty_152_fu_503_p3 = ((tmp_18_fu_485_p3[0:0] == 1'b1) ? tmp_8_fu_493_p4 : grp_fu_260_p4);

assign empty_153_fu_529_p3 = ((tmp_20_fu_511_p3[0:0] == 1'b1) ? tmp_s_fu_519_p4 : grp_fu_271_p4);

assign empty_154_fu_555_p3 = ((tmp_21_fu_537_p3[0:0] == 1'b1) ? tmp_11_fu_545_p4 : grp_fu_282_p4);

assign empty_155_fu_581_p3 = ((tmp_22_fu_563_p3[0:0] == 1'b1) ? tmp_13_fu_571_p4 : grp_fu_293_p4);

assign empty_156_fu_607_p3 = ((tmp_23_fu_589_p3[0:0] == 1'b1) ? tmp_15_fu_597_p4 : grp_fu_304_p4);

assign empty_157_fu_635_p1 = empty_reg_174[7:0];

assign empty_158_fu_660_p1 = grp_GOST_Crypt_Step_fu_217_ap_return[7:0];

assign empty_159_fu_759_p2 = (loop_index34_reg_206 + 4'd1);

assign empty_160_fu_765_p1 = loop_index34_reg_206[2:0];

assign empty_161_fu_781_p2 = Data_prep_3_reg_882 >> p_cast40_fu_777_p1;

assign empty_162_fu_786_p1 = empty_161_fu_781_p2[7:0];

assign empty_163_fu_812_p2 = (loop_index_fu_138 + 32'd1);

assign exitcond20_fu_754_p2 = ((loop_index34_reg_206 == Cur_Part_Size_reg_845) ? 1'b1 : 1'b0);

assign exitcond21_fu_371_p2 = ((loop_index37_reg_186 == Cur_Part_Size_reg_845) ? 1'b1 : 1'b0);

assign exitcond_fu_807_p2 = ((loop_index_fu_138 == Size_read_reg_834) ? 1'b1 : 1'b0);

assign grp_GOST_Crypt_Step_fu_217_ap_start = grp_GOST_Crypt_Step_fu_217_ap_start_reg;

assign grp_fu_238_p4 = {{grp_fu_238_p1[15:8]}};

assign grp_fu_249_p4 = {{grp_fu_249_p1[23:16]}};

assign grp_fu_260_p4 = {{grp_fu_260_p1[31:24]}};

assign grp_fu_271_p4 = {{grp_fu_271_p1[39:32]}};

assign grp_fu_282_p4 = {{grp_fu_282_p1[47:40]}};

assign grp_fu_293_p4 = {{grp_fu_293_p1[55:48]}};

assign grp_fu_304_p4 = {{grp_fu_304_p1[63:56]}};

assign icmp_ln186_fu_328_p2 = ((Size_assign_fu_134 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_344_p2 = ((tmp_fu_334_p4 == 29'd0) ? 1'b1 : 1'b0);

assign loop_index37_cast_cast_fu_386_p1 = empty_143_fu_382_p1;

assign p_10_fu_694_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[39:32]}};

assign p_11_fu_704_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[63:56]}};

assign p_12_fu_714_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[47:40]}};

assign p_13_fu_724_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[55:48]}};

assign p_7_fu_684_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[23:16]}};

assign p_8_fu_664_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[31:24]}};

assign p_9_fu_674_p4 = {{grp_GOST_Crypt_Step_fu_217_ap_return[15:8]}};

assign p_cast38_fu_404_p1 = tmp_1_fu_396_p3;

assign p_cast40_fu_777_p1 = tmp_17_fu_769_p3;

assign sub_ln208_fu_794_p2 = (Size_assign_fu_134 - zext_ln207_fu_791_p1);

assign tmp_11_fu_545_p4 = {{empty_145_fu_408_p2[47:40]}};

assign tmp_13_fu_571_p4 = {{empty_145_fu_408_p2[55:48]}};

assign tmp_15_fu_597_p4 = {{empty_145_fu_408_p2[63:56]}};

assign tmp_17_fu_769_p3 = {{empty_160_fu_765_p1}, {3'd0}};

assign tmp_18_fu_485_p3 = empty_144_fu_390_p2[32'd3];

assign tmp_1_fu_396_p3 = {{empty_143_fu_382_p1}, {3'd0}};

assign tmp_20_fu_511_p3 = empty_144_fu_390_p2[32'd4];

assign tmp_21_fu_537_p3 = empty_144_fu_390_p2[32'd5];

assign tmp_22_fu_563_p3 = empty_144_fu_390_p2[32'd6];

assign tmp_23_fu_589_p3 = empty_144_fu_390_p2[32'd7];

assign tmp_2_fu_433_p3 = empty_144_fu_390_p2[32'd1];

assign tmp_3_fu_459_p3 = empty_144_fu_390_p2[32'd2];

assign tmp_4_fu_441_p4 = {{empty_145_fu_408_p2[15:8]}};

assign tmp_6_fu_467_p4 = {{empty_145_fu_408_p2[23:16]}};

assign tmp_8_fu_493_p4 = {{empty_145_fu_408_p2[31:24]}};

assign tmp_fu_334_p4 = {{Size_assign_fu_134[31:3]}};

assign tmp_s_fu_519_p4 = {{empty_145_fu_408_p2[39:32]}};

assign trunc_ln188_fu_350_p1 = Size_assign_fu_134[3:0];

assign zext_ln207_fu_791_p1 = Cur_Part_Size_reg_845;

always @ (posedge ap_clk) begin
    Data_load_1_cast_reg_852[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //GOST_Encrypt_SR
