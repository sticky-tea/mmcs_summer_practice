// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GOST_Encrypt_SR_GOST_Crypt_Step (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        Data_prep_read,
        GOST_Key,
        Last,
        ap_return
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [63:0] Data_prep_read;
input  [31:0] GOST_Key;
input  [0:0] Last;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [6:0] GOST_Table_address0;
reg    GOST_Table_ce0;
wire   [3:0] GOST_Table_q0;
wire   [6:0] GOST_Table_address1;
reg    GOST_Table_ce1;
wire   [3:0] GOST_Table_q1;
wire   [6:0] GOST_Table_address2;
reg    GOST_Table_ce2;
wire   [3:0] GOST_Table_q2;
wire   [6:0] GOST_Table_address3;
reg    GOST_Table_ce3;
wire   [3:0] GOST_Table_q3;
wire   [6:0] GOST_Table_address4;
reg    GOST_Table_ce4;
wire   [3:0] GOST_Table_q4;
wire   [6:0] GOST_Table_address5;
reg    GOST_Table_ce5;
wire   [3:0] GOST_Table_q5;
wire   [6:0] GOST_Table_address6;
reg    GOST_Table_ce6;
wire   [3:0] GOST_Table_q6;
wire   [6:0] GOST_Table_address7;
reg    GOST_Table_ce7;
wire   [3:0] GOST_Table_q7;
reg   [0:0] Last_read_reg_658;
reg   [63:0] Data_prep_read_1_reg_663;
wire   [31:0] trunc_ln_fu_227_p4;
reg   [31:0] trunc_ln_reg_668;
wire   [31:0] trunc_ln61_fu_549_p1;
reg   [31:0] trunc_ln61_reg_714;
wire   [63:0] or_ln1_fu_327_p3;
wire   [63:0] zext_ln57_fu_354_p1;
wire   [63:0] or_ln55_1_fu_381_p3;
wire   [63:0] zext_ln57_1_fu_422_p1;
wire   [63:0] or_ln55_2_fu_449_p3;
wire   [63:0] zext_ln57_2_fu_476_p1;
wire   [63:0] or_ln55_3_fu_507_p3;
wire   [63:0] zext_ln57_3_fu_544_p1;
wire   [23:0] trunc_ln49_6_fu_269_p4;
wire   [23:0] trunc_ln49_3_fu_265_p1;
wire   [15:0] trunc_ln49_4_fu_255_p4;
wire   [15:0] trunc_ln49_1_fu_251_p1;
wire   [7:0] trunc_ln49_2_fu_241_p4;
wire   [7:0] trunc_ln49_fu_237_p1;
wire   [3:0] trunc_ln54_1_fu_301_p4;
wire   [3:0] trunc_ln54_fu_297_p1;
wire   [3:0] add_ln55_fu_317_p2;
wire   [7:0] zext_ln55_fu_323_p1;
wire   [7:0] add_ln54_fu_311_p2;
wire   [3:0] tmp_s_fu_336_p4;
wire   [6:0] or_ln2_fu_346_p3;
wire   [15:0] add_ln44_1_fu_291_p2;
wire   [3:0] trunc_ln2_fu_359_p4;
wire   [5:0] or_ln3_fu_369_p3;
wire   [7:0] zext_ln55_1_fu_377_p1;
wire   [3:0] trunc_ln57_1_fu_390_p4;
wire   [5:0] or_ln57_1_fu_400_p3;
wire   [5:0] or_ln57_fu_408_p2;
wire   [6:0] or_ln57_2_fu_414_p3;
wire   [23:0] add_ln44_fu_285_p2;
wire   [3:0] trunc_ln55_1_fu_427_p4;
wire   [6:0] or_ln55_4_fu_437_p3;
wire   [7:0] zext_ln55_2_fu_445_p1;
wire   [3:0] trunc_ln57_2_fu_458_p4;
wire   [6:0] or_ln57_3_fu_468_p3;
wire   [31:0] S_fu_279_p2;
wire   [3:0] trunc_ln55_2_fu_481_p4;
wire   [5:0] or_ln55_5_fu_491_p3;
wire  signed [6:0] sext_ln55_fu_499_p1;
wire   [7:0] zext_ln55_3_fu_503_p1;
wire   [3:0] trunc_ln57_3_fu_516_p4;
wire   [5:0] or_ln57_4_fu_526_p3;
wire   [5:0] or_ln57_5_fu_534_p2;
wire  signed [6:0] sext_ln57_fu_540_p1;
wire   [0:0] trunc_ln32_fu_563_p1;
wire   [2:0] tmp_18_fu_553_p4;
wire   [0:0] trunc_ln32_1_fu_567_p1;
wire   [31:0] or_ln4_fu_571_p10;
wire   [23:0] or_ln5_fu_596_p8;
wire   [23:0] trunc_ln61_1_fu_593_p1;
wire   [31:0] S_1_fu_614_p2;
wire   [7:0] tmp_19_fu_625_p4;
wire   [23:0] xor_ln64_fu_619_p2;
wire   [63:0] or_ln64_3_fu_635_p4;
wire   [63:0] or_ln_fu_644_p3;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
end

GOST_Encrypt_SR_GOST_Crypt_Step_GOST_Table #(
    .DataWidth( 4 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
GOST_Table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GOST_Table_address0),
    .ce0(GOST_Table_ce0),
    .q0(GOST_Table_q0),
    .address1(GOST_Table_address1),
    .ce1(GOST_Table_ce1),
    .q1(GOST_Table_q1),
    .address2(GOST_Table_address2),
    .ce2(GOST_Table_ce2),
    .q2(GOST_Table_q2),
    .address3(GOST_Table_address3),
    .ce3(GOST_Table_ce3),
    .q3(GOST_Table_q3),
    .address4(GOST_Table_address4),
    .ce4(GOST_Table_ce4),
    .q4(GOST_Table_q4),
    .address5(GOST_Table_address5),
    .ce5(GOST_Table_ce5),
    .q5(GOST_Table_q5),
    .address6(GOST_Table_address6),
    .ce6(GOST_Table_ce6),
    .q6(GOST_Table_q6),
    .address7(GOST_Table_address7),
    .ce7(GOST_Table_ce7),
    .q7(GOST_Table_q7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        Data_prep_read_1_reg_663 <= Data_prep_read;
        Last_read_reg_658 <= Last;
        trunc_ln61_reg_714 <= trunc_ln61_fu_549_p1;
        trunc_ln_reg_668 <= {{Data_prep_read[63:32]}};
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce0 = 1'b1;
    end else begin
        GOST_Table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce1 = 1'b1;
    end else begin
        GOST_Table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce2 = 1'b1;
    end else begin
        GOST_Table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce3 = 1'b1;
    end else begin
        GOST_Table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce4 = 1'b1;
    end else begin
        GOST_Table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce5 = 1'b1;
    end else begin
        GOST_Table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce6 = 1'b1;
    end else begin
        GOST_Table_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        GOST_Table_ce7 = 1'b1;
    end else begin
        GOST_Table_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_ce))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == ap_ce) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == ap_ce)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if (((1'b1 == ap_ce) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start == 1'b0) | (1'b0 == ap_ce)))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == ap_ce) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign GOST_Table_address0 = zext_ln57_3_fu_544_p1;

assign GOST_Table_address1 = or_ln55_3_fu_507_p3;

assign GOST_Table_address2 = zext_ln57_2_fu_476_p1;

assign GOST_Table_address3 = or_ln55_2_fu_449_p3;

assign GOST_Table_address4 = zext_ln57_1_fu_422_p1;

assign GOST_Table_address5 = or_ln55_1_fu_381_p3;

assign GOST_Table_address6 = zext_ln57_fu_354_p1;

assign GOST_Table_address7 = or_ln1_fu_327_p3;

assign S_1_fu_614_p2 = (trunc_ln61_reg_714 ^ or_ln4_fu_571_p10);

assign S_fu_279_p2 = (trunc_ln_fu_227_p4 + GOST_Key);

assign add_ln44_1_fu_291_p2 = (trunc_ln49_4_fu_255_p4 + trunc_ln49_1_fu_251_p1);

assign add_ln44_fu_285_p2 = (trunc_ln49_6_fu_269_p4 + trunc_ln49_3_fu_265_p1);

assign add_ln54_fu_311_p2 = (trunc_ln49_2_fu_241_p4 + trunc_ln49_fu_237_p1);

assign add_ln55_fu_317_p2 = (trunc_ln54_1_fu_301_p4 + trunc_ln54_fu_297_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) | (1'b0 == ap_ce));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = ((Last_read_reg_658[0:0] == 1'b1) ? or_ln64_3_fu_635_p4 : or_ln_fu_644_p3);

assign or_ln1_fu_327_p3 = {{56'd0}, {zext_ln55_fu_323_p1}};

assign or_ln2_fu_346_p3 = {{3'd1}, {tmp_s_fu_336_p4}};

assign or_ln3_fu_369_p3 = {{2'd2}, {trunc_ln2_fu_359_p4}};

assign or_ln4_fu_571_p10 = {{{{{{{{{trunc_ln32_fu_563_p1}, {GOST_Table_q3}}, {GOST_Table_q4}}, {GOST_Table_q5}}, {GOST_Table_q6}}, {GOST_Table_q7}}, {GOST_Table_q0}}, {GOST_Table_q1}}, {tmp_18_fu_553_p4}};

assign or_ln55_1_fu_381_p3 = {{56'd0}, {zext_ln55_1_fu_377_p1}};

assign or_ln55_2_fu_449_p3 = {{56'd0}, {zext_ln55_2_fu_445_p1}};

assign or_ln55_3_fu_507_p3 = {{56'd0}, {zext_ln55_3_fu_503_p1}};

assign or_ln55_4_fu_437_p3 = {{3'd4}, {trunc_ln55_1_fu_427_p4}};

assign or_ln55_5_fu_491_p3 = {{2'd2}, {trunc_ln55_2_fu_481_p4}};

assign or_ln57_1_fu_400_p3 = {{2'd2}, {trunc_ln57_1_fu_390_p4}};

assign or_ln57_2_fu_414_p3 = {{1'd0}, {or_ln57_fu_408_p2}};

assign or_ln57_3_fu_468_p3 = {{3'd5}, {trunc_ln57_2_fu_458_p4}};

assign or_ln57_4_fu_526_p3 = {{2'd2}, {trunc_ln57_3_fu_516_p4}};

assign or_ln57_5_fu_534_p2 = (or_ln57_4_fu_526_p3 | 6'd16);

assign or_ln57_fu_408_p2 = (or_ln57_1_fu_400_p3 | 6'd16);

assign or_ln5_fu_596_p8 = {{{{{{{trunc_ln32_1_fu_567_p1}, {GOST_Table_q5}}, {GOST_Table_q6}}, {GOST_Table_q7}}, {GOST_Table_q0}}, {GOST_Table_q1}}, {tmp_18_fu_553_p4}};

assign or_ln64_3_fu_635_p4 = {{{trunc_ln_reg_668}, {tmp_19_fu_625_p4}}, {xor_ln64_fu_619_p2}};

assign or_ln_fu_644_p3 = {{S_1_fu_614_p2}, {trunc_ln_reg_668}};

assign sext_ln55_fu_499_p1 = $signed(or_ln55_5_fu_491_p3);

assign sext_ln57_fu_540_p1 = $signed(or_ln57_5_fu_534_p2);

assign tmp_18_fu_553_p4 = {{GOST_Table_q2[3:1]}};

assign tmp_19_fu_625_p4 = {{S_1_fu_614_p2[31:24]}};

assign tmp_s_fu_336_p4 = {{add_ln54_fu_311_p2[7:4]}};

assign trunc_ln2_fu_359_p4 = {{add_ln44_1_fu_291_p2[11:8]}};

assign trunc_ln32_1_fu_567_p1 = GOST_Table_q4[0:0];

assign trunc_ln32_fu_563_p1 = GOST_Table_q2[0:0];

assign trunc_ln49_1_fu_251_p1 = GOST_Key[15:0];

assign trunc_ln49_2_fu_241_p4 = {{Data_prep_read[39:32]}};

assign trunc_ln49_3_fu_265_p1 = GOST_Key[23:0];

assign trunc_ln49_4_fu_255_p4 = {{Data_prep_read[47:32]}};

assign trunc_ln49_6_fu_269_p4 = {{Data_prep_read[55:32]}};

assign trunc_ln49_fu_237_p1 = GOST_Key[7:0];

assign trunc_ln54_1_fu_301_p4 = {{Data_prep_read[35:32]}};

assign trunc_ln54_fu_297_p1 = GOST_Key[3:0];

assign trunc_ln55_1_fu_427_p4 = {{add_ln44_fu_285_p2[19:16]}};

assign trunc_ln55_2_fu_481_p4 = {{S_fu_279_p2[27:24]}};

assign trunc_ln57_1_fu_390_p4 = {{add_ln44_1_fu_291_p2[15:12]}};

assign trunc_ln57_2_fu_458_p4 = {{add_ln44_fu_285_p2[23:20]}};

assign trunc_ln57_3_fu_516_p4 = {{S_fu_279_p2[31:28]}};

assign trunc_ln61_1_fu_593_p1 = Data_prep_read_1_reg_663[23:0];

assign trunc_ln61_fu_549_p1 = Data_prep_read[31:0];

assign trunc_ln_fu_227_p4 = {{Data_prep_read[63:32]}};

assign xor_ln64_fu_619_p2 = (trunc_ln61_1_fu_593_p1 ^ or_ln5_fu_596_p8);

assign zext_ln55_1_fu_377_p1 = or_ln3_fu_369_p3;

assign zext_ln55_2_fu_445_p1 = or_ln55_4_fu_437_p3;

assign zext_ln55_3_fu_503_p1 = $unsigned(sext_ln55_fu_499_p1);

assign zext_ln55_fu_323_p1 = add_ln55_fu_317_p2;

assign zext_ln57_1_fu_422_p1 = or_ln57_2_fu_414_p3;

assign zext_ln57_2_fu_476_p1 = or_ln57_3_fu_468_p3;

assign zext_ln57_3_fu_544_p1 = $unsigned(sext_ln57_fu_540_p1);

assign zext_ln57_fu_354_p1 = or_ln2_fu_346_p3;

endmodule //GOST_Encrypt_SR_GOST_Crypt_Step
