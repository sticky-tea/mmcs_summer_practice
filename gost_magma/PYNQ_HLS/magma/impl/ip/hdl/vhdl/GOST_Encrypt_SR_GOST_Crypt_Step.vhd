-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GOST_Encrypt_SR_GOST_Crypt_Step is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    Data_prep_read : IN STD_LOGIC_VECTOR (63 downto 0);
    GOST_Key : IN STD_LOGIC_VECTOR (31 downto 0);
    Last : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of GOST_Encrypt_SR_GOST_Crypt_Step is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal GOST_Table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce0 : STD_LOGIC;
    signal GOST_Table_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce1 : STD_LOGIC;
    signal GOST_Table_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address2 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce2 : STD_LOGIC;
    signal GOST_Table_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address3 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce3 : STD_LOGIC;
    signal GOST_Table_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address4 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce4 : STD_LOGIC;
    signal GOST_Table_q4 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address5 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce5 : STD_LOGIC;
    signal GOST_Table_q5 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address6 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce6 : STD_LOGIC;
    signal GOST_Table_q6 : STD_LOGIC_VECTOR (3 downto 0);
    signal GOST_Table_address7 : STD_LOGIC_VECTOR (6 downto 0);
    signal GOST_Table_ce7 : STD_LOGIC;
    signal GOST_Table_q7 : STD_LOGIC_VECTOR (3 downto 0);
    signal Last_read_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal Data_prep_read_1_reg_663 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_327_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln55_1_fu_381_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln55_2_fu_449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_2_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln55_3_fu_507_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_3_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln49_6_fu_269_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln49_3_fu_265_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln49_4_fu_255_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln49_1_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln49_2_fu_241_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_1_fu_301_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln54_fu_297_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln55_fu_317_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln55_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln54_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_336_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2_fu_346_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln44_1_fu_291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_359_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln3_fu_369_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln55_1_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_1_fu_390_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln57_1_fu_400_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln57_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln57_2_fu_414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln44_fu_285_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln55_1_fu_427_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln55_4_fu_437_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln55_2_fu_445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_2_fu_458_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln57_3_fu_468_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal S_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_2_fu_481_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln55_5_fu_491_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln55_fu_499_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln55_3_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_3_fu_516_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln57_4_fu_526_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln57_5_fu_534_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln57_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln32_fu_563_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_553_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln32_1_fu_567_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_fu_571_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln5_fu_596_p8 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln61_1_fu_593_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal S_1_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_625_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln64_fu_619_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln64_3_fu_635_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_644_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_iter0_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_iter1_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GOST_Encrypt_SR_GOST_Crypt_Step_GOST_Table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address4 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address5 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address6 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address7 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    GOST_Table_U : component GOST_Encrypt_SR_GOST_Crypt_Step_GOST_Table
    generic map (
        DataWidth => 4,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GOST_Table_address0,
        ce0 => GOST_Table_ce0,
        q0 => GOST_Table_q0,
        address1 => GOST_Table_address1,
        ce1 => GOST_Table_ce1,
        q1 => GOST_Table_q1,
        address2 => GOST_Table_address2,
        ce2 => GOST_Table_ce2,
        q2 => GOST_Table_q2,
        address3 => GOST_Table_address3,
        ce3 => GOST_Table_ce3,
        q3 => GOST_Table_q3,
        address4 => GOST_Table_address4,
        ce4 => GOST_Table_ce4,
        q4 => GOST_Table_q4,
        address5 => GOST_Table_address5,
        ce5 => GOST_Table_ce5,
        q5 => GOST_Table_q5,
        address6 => GOST_Table_address6,
        ce6 => GOST_Table_ce6,
        q6 => GOST_Table_q6,
        address7 => GOST_Table_address7,
        ce7 => GOST_Table_ce7,
        q7 => GOST_Table_q7);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                Data_prep_read_1_reg_663 <= Data_prep_read;
                Last_read_reg_658 <= Last;
                trunc_ln61_reg_714 <= trunc_ln61_fu_549_p1;
                trunc_ln_reg_668 <= Data_prep_read(63 downto 32);
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, ap_CS_iter1_fsm_state0, ap_ce, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, ap_CS_iter1_fsm_state0, ap_ce, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce)))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    GOST_Table_address0 <= zext_ln57_3_fu_544_p1(7 - 1 downto 0);
    GOST_Table_address1 <= or_ln55_3_fu_507_p3(7 - 1 downto 0);
    GOST_Table_address2 <= zext_ln57_2_fu_476_p1(7 - 1 downto 0);
    GOST_Table_address3 <= or_ln55_2_fu_449_p3(7 - 1 downto 0);
    GOST_Table_address4 <= zext_ln57_1_fu_422_p1(7 - 1 downto 0);
    GOST_Table_address5 <= or_ln55_1_fu_381_p3(7 - 1 downto 0);
    GOST_Table_address6 <= zext_ln57_fu_354_p1(7 - 1 downto 0);
    GOST_Table_address7 <= or_ln1_fu_327_p3(7 - 1 downto 0);

    GOST_Table_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce0 <= ap_const_logic_1;
        else 
            GOST_Table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce1_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce1 <= ap_const_logic_1;
        else 
            GOST_Table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce2_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce2 <= ap_const_logic_1;
        else 
            GOST_Table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce3_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce3 <= ap_const_logic_1;
        else 
            GOST_Table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce4_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce4 <= ap_const_logic_1;
        else 
            GOST_Table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce5_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce5 <= ap_const_logic_1;
        else 
            GOST_Table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce6_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce6 <= ap_const_logic_1;
        else 
            GOST_Table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    GOST_Table_ce7_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            GOST_Table_ce7 <= ap_const_logic_1;
        else 
            GOST_Table_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_fu_614_p2 <= (trunc_ln61_reg_714 xor or_ln4_fu_571_p10);
    S_fu_279_p2 <= std_logic_vector(unsigned(trunc_ln_fu_227_p4) + unsigned(GOST_Key));
    add_ln44_1_fu_291_p2 <= std_logic_vector(unsigned(trunc_ln49_4_fu_255_p4) + unsigned(trunc_ln49_1_fu_251_p1));
    add_ln44_fu_285_p2 <= std_logic_vector(unsigned(trunc_ln49_6_fu_269_p4) + unsigned(trunc_ln49_3_fu_265_p1));
    add_ln54_fu_311_p2 <= std_logic_vector(unsigned(trunc_ln49_2_fu_241_p4) + unsigned(trunc_ln49_fu_237_p1));
    add_ln55_fu_317_p2 <= std_logic_vector(unsigned(trunc_ln54_1_fu_301_p4) + unsigned(trunc_ln54_fu_297_p1));
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_ST_iter0_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_iter1_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_ce, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_logic_1 = ap_ce))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_ce, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        or_ln64_3_fu_635_p4 when (Last_read_reg_658(0) = '1') else 
        or_ln_fu_644_p3;
    or_ln1_fu_327_p3 <= (ap_const_lv56_0 & zext_ln55_fu_323_p1);
    or_ln2_fu_346_p3 <= (ap_const_lv3_1 & tmp_s_fu_336_p4);
    or_ln3_fu_369_p3 <= (ap_const_lv2_2 & trunc_ln2_fu_359_p4);
    or_ln4_fu_571_p10 <= ((((((((trunc_ln32_fu_563_p1 & GOST_Table_q3) & GOST_Table_q4) & GOST_Table_q5) & GOST_Table_q6) & GOST_Table_q7) & GOST_Table_q0) & GOST_Table_q1) & tmp_18_fu_553_p4);
    or_ln55_1_fu_381_p3 <= (ap_const_lv56_0 & zext_ln55_1_fu_377_p1);
    or_ln55_2_fu_449_p3 <= (ap_const_lv56_0 & zext_ln55_2_fu_445_p1);
    or_ln55_3_fu_507_p3 <= (ap_const_lv56_0 & zext_ln55_3_fu_503_p1);
    or_ln55_4_fu_437_p3 <= (ap_const_lv3_4 & trunc_ln55_1_fu_427_p4);
    or_ln55_5_fu_491_p3 <= (ap_const_lv2_2 & trunc_ln55_2_fu_481_p4);
    or_ln57_1_fu_400_p3 <= (ap_const_lv2_2 & trunc_ln57_1_fu_390_p4);
    or_ln57_2_fu_414_p3 <= (ap_const_lv1_0 & or_ln57_fu_408_p2);
    or_ln57_3_fu_468_p3 <= (ap_const_lv3_5 & trunc_ln57_2_fu_458_p4);
    or_ln57_4_fu_526_p3 <= (ap_const_lv2_2 & trunc_ln57_3_fu_516_p4);
    or_ln57_5_fu_534_p2 <= (or_ln57_4_fu_526_p3 or ap_const_lv6_10);
    or_ln57_fu_408_p2 <= (or_ln57_1_fu_400_p3 or ap_const_lv6_10);
    or_ln5_fu_596_p8 <= ((((((trunc_ln32_1_fu_567_p1 & GOST_Table_q5) & GOST_Table_q6) & GOST_Table_q7) & GOST_Table_q0) & GOST_Table_q1) & tmp_18_fu_553_p4);
    or_ln64_3_fu_635_p4 <= ((trunc_ln_reg_668 & tmp_19_fu_625_p4) & xor_ln64_fu_619_p2);
    or_ln_fu_644_p3 <= (S_1_fu_614_p2 & trunc_ln_reg_668);
        sext_ln55_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln55_5_fu_491_p3),7));

        sext_ln57_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln57_5_fu_534_p2),7));

    tmp_18_fu_553_p4 <= GOST_Table_q2(3 downto 1);
    tmp_19_fu_625_p4 <= S_1_fu_614_p2(31 downto 24);
    tmp_s_fu_336_p4 <= add_ln54_fu_311_p2(7 downto 4);
    trunc_ln2_fu_359_p4 <= add_ln44_1_fu_291_p2(11 downto 8);
    trunc_ln32_1_fu_567_p1 <= GOST_Table_q4(1 - 1 downto 0);
    trunc_ln32_fu_563_p1 <= GOST_Table_q2(1 - 1 downto 0);
    trunc_ln49_1_fu_251_p1 <= GOST_Key(16 - 1 downto 0);
    trunc_ln49_2_fu_241_p4 <= Data_prep_read(39 downto 32);
    trunc_ln49_3_fu_265_p1 <= GOST_Key(24 - 1 downto 0);
    trunc_ln49_4_fu_255_p4 <= Data_prep_read(47 downto 32);
    trunc_ln49_6_fu_269_p4 <= Data_prep_read(55 downto 32);
    trunc_ln49_fu_237_p1 <= GOST_Key(8 - 1 downto 0);
    trunc_ln54_1_fu_301_p4 <= Data_prep_read(35 downto 32);
    trunc_ln54_fu_297_p1 <= GOST_Key(4 - 1 downto 0);
    trunc_ln55_1_fu_427_p4 <= add_ln44_fu_285_p2(19 downto 16);
    trunc_ln55_2_fu_481_p4 <= S_fu_279_p2(27 downto 24);
    trunc_ln57_1_fu_390_p4 <= add_ln44_1_fu_291_p2(15 downto 12);
    trunc_ln57_2_fu_458_p4 <= add_ln44_fu_285_p2(23 downto 20);
    trunc_ln57_3_fu_516_p4 <= S_fu_279_p2(31 downto 28);
    trunc_ln61_1_fu_593_p1 <= Data_prep_read_1_reg_663(24 - 1 downto 0);
    trunc_ln61_fu_549_p1 <= Data_prep_read(32 - 1 downto 0);
    trunc_ln_fu_227_p4 <= Data_prep_read(63 downto 32);
    xor_ln64_fu_619_p2 <= (trunc_ln61_1_fu_593_p1 xor or_ln5_fu_596_p8);
    zext_ln55_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_369_p3),8));
    zext_ln55_2_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln55_4_fu_437_p3),8));
    zext_ln55_3_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln55_fu_499_p1),8));
    zext_ln55_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_317_p2),8));
    zext_ln57_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_2_fu_414_p3),64));
    zext_ln57_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_3_fu_468_p3),64));
    zext_ln57_3_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln57_fu_540_p1),64));
    zext_ln57_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2_fu_346_p3),64));
end behav;
