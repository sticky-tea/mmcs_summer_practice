// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GOST_Encrypt_SR_GOST_Encrypt_SR_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Cur_Part_Size,
        Data_load_cast,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] Cur_Part_Size;
input  [7:0] Data_load_cast;
output  [63:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond20_fu_124_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] Data_load_cast_cast_fu_107_p1;
reg   [63:0] Data_load_cast_cast_reg_495;
reg   [3:0] loop_index32_fu_80;
wire   [3:0] empty_fu_129_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] Data_prep_fu_84;
wire   [63:0] Data_prep_1_fu_441_p9;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] empty_94_fu_138_p1;
wire   [7:0] loop_index32_cast_cast_fu_142_p1;
wire   [5:0] tmp_1_fu_152_p3;
wire   [63:0] p_cast38_fu_160_p1;
wire   [7:0] empty_95_fu_146_p2;
wire   [63:0] empty_96_fu_164_p2;
wire   [0:0] empty_97_fu_169_p1;
wire   [7:0] empty_98_fu_173_p1;
wire   [7:0] empty_99_fu_177_p1;
wire   [0:0] tmp_fu_189_p3;
wire   [7:0] tmp_4_fu_197_p4;
wire   [7:0] tmp_5_fu_207_p4;
wire   [0:0] tmp_2_fu_225_p3;
wire   [7:0] tmp_6_fu_233_p4;
wire   [7:0] tmp_7_fu_243_p4;
wire   [0:0] tmp_3_fu_261_p3;
wire   [7:0] tmp_8_fu_269_p4;
wire   [7:0] tmp_9_fu_279_p4;
wire   [0:0] tmp_18_fu_297_p3;
wire   [7:0] tmp_s_fu_305_p4;
wire   [7:0] tmp_10_fu_315_p4;
wire   [0:0] tmp_19_fu_333_p3;
wire   [7:0] tmp_11_fu_341_p4;
wire   [7:0] tmp_12_fu_351_p4;
wire   [0:0] tmp_20_fu_369_p3;
wire   [7:0] tmp_13_fu_377_p4;
wire   [7:0] tmp_14_fu_387_p4;
wire   [0:0] tmp_21_fu_405_p3;
wire   [7:0] tmp_15_fu_413_p4;
wire   [7:0] tmp_16_fu_423_p4;
wire   [7:0] empty_107_fu_433_p3;
wire   [7:0] empty_106_fu_397_p3;
wire   [7:0] empty_105_fu_361_p3;
wire   [7:0] empty_104_fu_325_p3;
wire   [7:0] empty_103_fu_289_p3;
wire   [7:0] empty_102_fu_253_p3;
wire   [7:0] empty_101_fu_217_p3;
wire   [7:0] empty_100_fu_181_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

GOST_Encrypt_SR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            Data_prep_fu_84 <= 64'd0;
        end else if (((exitcond20_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            Data_prep_fu_84 <= Data_prep_1_fu_441_p9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            loop_index32_fu_80 <= 4'd0;
        end else if (((exitcond20_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            loop_index32_fu_80 <= empty_fu_129_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Data_load_cast_cast_reg_495[7 : 0] <= Data_load_cast_cast_fu_107_p1[7 : 0];
    end
end

always @ (*) begin
    if (((exitcond20_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond20_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_load_cast_cast_fu_107_p1 = Data_load_cast;

assign Data_prep_1_fu_441_p9 = {{{{{{{{empty_107_fu_433_p3}, {empty_106_fu_397_p3}}, {empty_105_fu_361_p3}}, {empty_104_fu_325_p3}}, {empty_103_fu_289_p3}}, {empty_102_fu_253_p3}}, {empty_101_fu_217_p3}}, {empty_100_fu_181_p3}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_100_fu_181_p3 = ((empty_97_fu_169_p1[0:0] == 1'b1) ? empty_98_fu_173_p1 : empty_99_fu_177_p1);

assign empty_101_fu_217_p3 = ((tmp_fu_189_p3[0:0] == 1'b1) ? tmp_4_fu_197_p4 : tmp_5_fu_207_p4);

assign empty_102_fu_253_p3 = ((tmp_2_fu_225_p3[0:0] == 1'b1) ? tmp_6_fu_233_p4 : tmp_7_fu_243_p4);

assign empty_103_fu_289_p3 = ((tmp_3_fu_261_p3[0:0] == 1'b1) ? tmp_8_fu_269_p4 : tmp_9_fu_279_p4);

assign empty_104_fu_325_p3 = ((tmp_18_fu_297_p3[0:0] == 1'b1) ? tmp_s_fu_305_p4 : tmp_10_fu_315_p4);

assign empty_105_fu_361_p3 = ((tmp_19_fu_333_p3[0:0] == 1'b1) ? tmp_11_fu_341_p4 : tmp_12_fu_351_p4);

assign empty_106_fu_397_p3 = ((tmp_20_fu_369_p3[0:0] == 1'b1) ? tmp_13_fu_377_p4 : tmp_14_fu_387_p4);

assign empty_107_fu_433_p3 = ((tmp_21_fu_405_p3[0:0] == 1'b1) ? tmp_15_fu_413_p4 : tmp_16_fu_423_p4);

assign empty_94_fu_138_p1 = loop_index32_fu_80[2:0];

assign empty_95_fu_146_p2 = 8'd1 << loop_index32_cast_cast_fu_142_p1;

assign empty_96_fu_164_p2 = Data_load_cast_cast_reg_495 << p_cast38_fu_160_p1;

assign empty_97_fu_169_p1 = empty_95_fu_146_p2[0:0];

assign empty_98_fu_173_p1 = empty_96_fu_164_p2[7:0];

assign empty_99_fu_177_p1 = Data_prep_fu_84[7:0];

assign empty_fu_129_p2 = (loop_index32_fu_80 + 4'd1);

assign exitcond20_fu_124_p2 = ((loop_index32_fu_80 == Cur_Part_Size) ? 1'b1 : 1'b0);

assign loop_index32_cast_cast_fu_142_p1 = empty_94_fu_138_p1;

assign p_cast38_fu_160_p1 = tmp_1_fu_152_p3;

assign p_out = Data_prep_fu_84;

assign tmp_10_fu_315_p4 = {{Data_prep_fu_84[39:32]}};

assign tmp_11_fu_341_p4 = {{empty_96_fu_164_p2[47:40]}};

assign tmp_12_fu_351_p4 = {{Data_prep_fu_84[47:40]}};

assign tmp_13_fu_377_p4 = {{empty_96_fu_164_p2[55:48]}};

assign tmp_14_fu_387_p4 = {{Data_prep_fu_84[55:48]}};

assign tmp_15_fu_413_p4 = {{empty_96_fu_164_p2[63:56]}};

assign tmp_16_fu_423_p4 = {{Data_prep_fu_84[63:56]}};

assign tmp_18_fu_297_p3 = empty_95_fu_146_p2[32'd4];

assign tmp_19_fu_333_p3 = empty_95_fu_146_p2[32'd5];

assign tmp_1_fu_152_p3 = {{empty_94_fu_138_p1}, {3'd0}};

assign tmp_20_fu_369_p3 = empty_95_fu_146_p2[32'd6];

assign tmp_21_fu_405_p3 = empty_95_fu_146_p2[32'd7];

assign tmp_2_fu_225_p3 = empty_95_fu_146_p2[32'd2];

assign tmp_3_fu_261_p3 = empty_95_fu_146_p2[32'd3];

assign tmp_4_fu_197_p4 = {{empty_96_fu_164_p2[15:8]}};

assign tmp_5_fu_207_p4 = {{Data_prep_fu_84[15:8]}};

assign tmp_6_fu_233_p4 = {{empty_96_fu_164_p2[23:16]}};

assign tmp_7_fu_243_p4 = {{Data_prep_fu_84[23:16]}};

assign tmp_8_fu_269_p4 = {{empty_96_fu_164_p2[31:24]}};

assign tmp_9_fu_279_p4 = {{Data_prep_fu_84[31:24]}};

assign tmp_fu_189_p3 = empty_95_fu_146_p2[32'd1];

assign tmp_s_fu_305_p4 = {{empty_96_fu_164_p2[39:32]}};

always @ (posedge ap_clk) begin
    Data_load_cast_cast_reg_495[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //GOST_Encrypt_SR_GOST_Encrypt_SR_Pipeline_1
