-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GOST_Encrypt_SR_GOST_Encrypt_SR_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Cur_Part_Size : IN STD_LOGIC_VECTOR (3 downto 0);
    Data_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of GOST_Encrypt_SR_GOST_Encrypt_SR_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond20_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Data_load_cast_cast_fu_107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Data_load_cast_cast_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index32_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_129_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal Data_prep_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal Data_prep_1_fu_441_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_94_fu_138_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_index32_cast_cast_fu_142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_152_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast38_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_95_fu_146_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_96_fu_164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_97_fu_169_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_98_fu_173_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_99_fu_177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_207_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_233_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_279_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_305_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_341_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_377_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_387_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_107_fu_433_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_106_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_105_fu_361_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_104_fu_325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_103_fu_289_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_102_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_101_fu_217_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_100_fu_181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GOST_Encrypt_SR_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GOST_Encrypt_SR_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    Data_prep_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Data_prep_fu_84 <= ap_const_lv64_0;
                elsif (((exitcond20_fu_124_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    Data_prep_fu_84 <= Data_prep_1_fu_441_p9;
                end if;
            end if; 
        end if;
    end process;

    loop_index32_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index32_fu_80 <= ap_const_lv4_0;
                elsif (((exitcond20_fu_124_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    loop_index32_fu_80 <= empty_fu_129_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    Data_load_cast_cast_reg_495(7 downto 0) <= Data_load_cast_cast_fu_107_p1(7 downto 0);
            end if;
        end if;
    end process;
    Data_load_cast_cast_reg_495(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Data_load_cast_cast_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_load_cast),64));
    Data_prep_1_fu_441_p9 <= (((((((empty_107_fu_433_p3 & empty_106_fu_397_p3) & empty_105_fu_361_p3) & empty_104_fu_325_p3) & empty_103_fu_289_p3) & empty_102_fu_253_p3) & empty_101_fu_217_p3) & empty_100_fu_181_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, exitcond20_fu_124_p2)
    begin
        if (((exitcond20_fu_124_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_181_p3 <= 
        empty_98_fu_173_p1 when (empty_97_fu_169_p1(0) = '1') else 
        empty_99_fu_177_p1;
    empty_101_fu_217_p3 <= 
        tmp_4_fu_197_p4 when (tmp_fu_189_p3(0) = '1') else 
        tmp_5_fu_207_p4;
    empty_102_fu_253_p3 <= 
        tmp_6_fu_233_p4 when (tmp_2_fu_225_p3(0) = '1') else 
        tmp_7_fu_243_p4;
    empty_103_fu_289_p3 <= 
        tmp_8_fu_269_p4 when (tmp_3_fu_261_p3(0) = '1') else 
        tmp_9_fu_279_p4;
    empty_104_fu_325_p3 <= 
        tmp_s_fu_305_p4 when (tmp_18_fu_297_p3(0) = '1') else 
        tmp_10_fu_315_p4;
    empty_105_fu_361_p3 <= 
        tmp_11_fu_341_p4 when (tmp_19_fu_333_p3(0) = '1') else 
        tmp_12_fu_351_p4;
    empty_106_fu_397_p3 <= 
        tmp_13_fu_377_p4 when (tmp_20_fu_369_p3(0) = '1') else 
        tmp_14_fu_387_p4;
    empty_107_fu_433_p3 <= 
        tmp_15_fu_413_p4 when (tmp_21_fu_405_p3(0) = '1') else 
        tmp_16_fu_423_p4;
    empty_94_fu_138_p1 <= loop_index32_fu_80(3 - 1 downto 0);
    empty_95_fu_146_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & loop_index32_cast_cast_fu_142_p1(8-1 downto 0)))));
    empty_96_fu_164_p2 <= std_logic_vector(shift_left(unsigned(Data_load_cast_cast_reg_495),to_integer(unsigned('0' & p_cast38_fu_160_p1(31-1 downto 0)))));
    empty_97_fu_169_p1 <= empty_95_fu_146_p2(1 - 1 downto 0);
    empty_98_fu_173_p1 <= empty_96_fu_164_p2(8 - 1 downto 0);
    empty_99_fu_177_p1 <= Data_prep_fu_84(8 - 1 downto 0);
    empty_fu_129_p2 <= std_logic_vector(unsigned(loop_index32_fu_80) + unsigned(ap_const_lv4_1));
    exitcond20_fu_124_p2 <= "1" when (loop_index32_fu_80 = Cur_Part_Size) else "0";
    loop_index32_cast_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_94_fu_138_p1),8));
    p_cast38_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_152_p3),64));
    p_out <= Data_prep_fu_84;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, exitcond20_fu_124_p2, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond20_fu_124_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_315_p4 <= Data_prep_fu_84(39 downto 32);
    tmp_11_fu_341_p4 <= empty_96_fu_164_p2(47 downto 40);
    tmp_12_fu_351_p4 <= Data_prep_fu_84(47 downto 40);
    tmp_13_fu_377_p4 <= empty_96_fu_164_p2(55 downto 48);
    tmp_14_fu_387_p4 <= Data_prep_fu_84(55 downto 48);
    tmp_15_fu_413_p4 <= empty_96_fu_164_p2(63 downto 56);
    tmp_16_fu_423_p4 <= Data_prep_fu_84(63 downto 56);
    tmp_18_fu_297_p3 <= empty_95_fu_146_p2(4 downto 4);
    tmp_19_fu_333_p3 <= empty_95_fu_146_p2(5 downto 5);
    tmp_1_fu_152_p3 <= (empty_94_fu_138_p1 & ap_const_lv3_0);
    tmp_20_fu_369_p3 <= empty_95_fu_146_p2(6 downto 6);
    tmp_21_fu_405_p3 <= empty_95_fu_146_p2(7 downto 7);
    tmp_2_fu_225_p3 <= empty_95_fu_146_p2(2 downto 2);
    tmp_3_fu_261_p3 <= empty_95_fu_146_p2(3 downto 3);
    tmp_4_fu_197_p4 <= empty_96_fu_164_p2(15 downto 8);
    tmp_5_fu_207_p4 <= Data_prep_fu_84(15 downto 8);
    tmp_6_fu_233_p4 <= empty_96_fu_164_p2(23 downto 16);
    tmp_7_fu_243_p4 <= Data_prep_fu_84(23 downto 16);
    tmp_8_fu_269_p4 <= empty_96_fu_164_p2(31 downto 24);
    tmp_9_fu_279_p4 <= Data_prep_fu_84(31 downto 24);
    tmp_fu_189_p3 <= empty_95_fu_146_p2(1 downto 1);
    tmp_s_fu_305_p4 <= empty_96_fu_164_p2(39 downto 32);
end behav;
