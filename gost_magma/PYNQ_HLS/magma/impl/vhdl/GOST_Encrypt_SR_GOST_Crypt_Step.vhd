-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GOST_Encrypt_SR_GOST_Crypt_Step is
port (
    ap_ready : OUT STD_LOGIC;
    Data_prep_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    Last : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of GOST_Encrypt_SR_GOST_Crypt_Step is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal shl_ln42_fu_68_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln42_fu_74_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln18_fu_94_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_80_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1_fu_98_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_fu_90_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln2_fu_116_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln46_1_fu_112_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal S_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_58_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_140_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_fu_134_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln49_3_fu_150_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_160_p3 : STD_LOGIC_VECTOR (63 downto 0);


begin



    S_fu_128_p2 <= (trunc_ln46_fu_90_p1 xor or_ln1_fu_98_p6);
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        or_ln49_3_fu_150_p4 when (Last(0) = '1') else 
        or_ln_fu_160_p3;
    or_ln1_fu_98_p6 <= ((((trunc_ln18_fu_94_p1 & or_ln42_fu_74_p2) & or_ln42_fu_74_p2) & or_ln42_fu_74_p2) & tmp_s_fu_80_p4);
    or_ln2_fu_116_p5 <= (((trunc_ln18_fu_94_p1 & or_ln42_fu_74_p2) & or_ln42_fu_74_p2) & tmp_s_fu_80_p4);
    or_ln42_fu_74_p2 <= (shl_ln42_fu_68_p2 or p_read1);
    or_ln49_3_fu_150_p4 <= ((trunc_ln_fu_58_p4 & tmp_17_fu_140_p4) & xor_ln49_fu_134_p2);
    or_ln_fu_160_p3 <= (S_fu_128_p2 & trunc_ln_fu_58_p4);
    shl_ln42_fu_68_p2 <= std_logic_vector(shift_left(unsigned(p_read1),to_integer(unsigned('0' & ap_const_lv8_4(8-1 downto 0)))));
    tmp_17_fu_140_p4 <= S_fu_128_p2(31 downto 24);
    tmp_s_fu_80_p4 <= or_ln42_fu_74_p2(7 downto 5);
    trunc_ln18_fu_94_p1 <= or_ln42_fu_74_p2(5 - 1 downto 0);
    trunc_ln46_1_fu_112_p1 <= Data_prep_read(24 - 1 downto 0);
    trunc_ln46_fu_90_p1 <= Data_prep_read(32 - 1 downto 0);
    trunc_ln_fu_58_p4 <= Data_prep_read(63 downto 32);
    xor_ln49_fu_134_p2 <= (trunc_ln46_1_fu_112_p1 xor or_ln2_fu_116_p5);
end behav;
